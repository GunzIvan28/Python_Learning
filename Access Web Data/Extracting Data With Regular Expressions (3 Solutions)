# Finding Numbers in a Haystack

In this assignment you will read through and parse a file with text and numbers. You will extract all the numbers in the file and compute the sum of the numbers.

Data Files
We provide two files for this assignment. One is a sample file where we give you the sum for your testing and the other is the actual data you need to process for the assignment.

Sample data: http://python-data.dr-chuck.net/regex_sum_42.txt (There are 87 values with a sum=445822)
Actual data: http://python-data.dr-chuck.net/regex_sum_247544.txt (There are 65 values and the sum ends with 135)
These links open in a new window. Make sure to save the file into the same folder as you will be writing your Python program. Note: Each student will have a distinct data file for the assignment - so only use your own data file for analysis.
Data Format
The file contains much of the text from the introduction of the textbook except that random numbers are inserted throughout the text. Here is a sample of the output you might see:

Why should you learn to write programs? 7746
12 1929 8827
Writing programs (or programming) is a very creative 
7 and rewarding activity.  You can write programs for 
many reasons, ranging from making your living to solving
8837 a difficult data analysis problem to having fun to helping 128
someone else solve a problem.  This book assumes that 
everyone needs to know how to program ...
The sum for the sample text above is 27486. The numbers can appear anywhere in the line. There can be any number of numbers in each line (including none).
Handling The Data
The basic outline of this problem is to read the file, look for integers using the re.findall(), looking for a regular expression of '[0-9]+' and then converting the extracted strings to integers and summing up the integers.
## Turn in Assignent

Enter the sum from the actual data and your Python code below:
Sum: 
 (ends with 135) Submit Assignment
Python code:
# My Solution:

``` Python
import re
fhandle = open('regex_sum_247544.txt')#returns a handle
content = fhandle.read()
numbers = re.findall('[0-9]+', content)

#numbers是一个由findall返回的list,里面的每个元素是一个string
#re.findall() returns a list, every elements in the list is a string
#string类型的元素不能用sum()函数直接求和,所以有以下三种方式实现先转换(成int)再求和
#we cannot use sum() to sum a string directly
#We'll use the following 3 methods to convert the string to int type 
#and then sum them

#方法1：用for循环实现求和：先把numbers这个list里的每个元素转成int,再逐个相加
#Method1：using a for loop to sum all elements in numbers (numbers is a list): 
#         first convert each element into int type, and sum them one by one
sum_number = 0
for num in numbers:
    num = int(num)
    sum_number = sum_number+num
print sum_number

#方法二：先使用for循环把numbers里的每个元素变成int类型,然后用[]把这些元素放到一个list里
#      这里的for循环每个iteration里是访问list的每个元素
#Method 2:We can use for loop to look through every element in the list
#convert every element to int type, and put the int type element to a new list
#now the new list int_number is a list with every one in it is a int type element
int_numbers = [int(num) for num in numbers]
sum_number = sum (int_numbers)
print sum_number  

#方法三：先使用for循环把numbers里的每个元素变成int类型,然后直接覆盖原来对应位置的元素
#      这里的for循环每个iteration里是访问list的元素下标
#Method 3: convert each element of a list by index in the for loop
#Using the index of the list to find every string elements 
#in the original list, convert them to a int type one
#and replace the string elements by the int type elements correspondingly
#Here the [i] is the index of the list


for i in range(len(numbers)):
    numbers[i] = int(numbers[i])
sum_number = sum (numbers)
print sum_number  
```
